<html>
<head>
    <title>React App Demo</title>
    <script src="https://unpkg.com/react@16/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
    
</head>

<body>

<div id="root"></div>
<script type="text/babel">
    // define your sub components here

    const ItemList = (props) => {
      const bullets =  props.items.map((item)=> {
        return <li onClick={props.handleClick} key={item._id}>{item.quote}</li>
      });
      return <ul>{bullets}</ul>
    }

    const ItemDetail = (props) => {
      return <div>
              <h3>Details for:</h3>
              <form>
                Quote: <input onChange={props.handleEdit} type="text" name="quote" value={props.item.quote || ""}  /><br />
                Author: <input onChange={props.handleEdit} type="text" name="author" value={props.item.author || ""}  /><br />
                Date: <input onChange={props.handleEdit} type="text" name="date" value={props.item.date || ""}  /> <br />
                <p>ID: {props.item._id}</p>
              </form>
              <button onClick={props.handleClear}>Clear</button>
              <button onClick={props.handleDelete}>Delete</button>
              <button onClick={props.handleUpdate}>Update</button>
            </div>
    }

    class App extends React.Component{
      constructor(props){
          super(props);
          // Set initial state using data from server application
          this.state = {
            items: {{{ quotes }}},
            currentItem: { } // current selected item
          };

          // bind application state to click handler
          this.selectItem = this.selectItem.bind(this);
          this.handleClear = this.handleClear.bind(this);
          this.handleEdit = this.handleEdit.bind(this);
          this.handleDelete = this.handleDelete.bind(this);
          this.handleUpdate = this.handleUpdate.bind(this);
      }
      // some coments here
      handleUpdate() {
        fetch(`/api/quote/${this.state.currentItem._id}`, {
          method: "POST",
        	headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            quote: this.state.currentItem.quote,
            author: this.state.currentItem.author,
            date: this.state.currentItem.date,
          })
        })
        .then((response) => {
            return response.json();
        })
        .then((result) => {
          console.log(JSON.stringify(result));
          this.setState(result) 
        })
        .catch(err => console.log(err));
      }

      handleDelete() {
        console.log("Delete me");
        fetch(`/api/delete/${this.state.currentItem._id}`)
        .then((response) => {
            return response.json();
          })
          .then((result) => {
            console.log(result);
          })
          .catch(err => console.log(err));
      }

      handleEdit(e){
        console.log(e.target.value);
        let newItem = this.state.currentItem;
        newItem[e.target.name] = e.target.value;
        this.setState({currentItem: newItem});
      }


      handleClear() {
        this.setState({currentItem: {}});
      }

      // handle list item clicked
      selectItem(event) {
        // event.target is the HTML item clicked
        console.log(event.target.innerText);
        const found = this.state.items.find((item)=> {
          return item.quote === event.target.innerText;
        });
        console.log(found);
        this.setState({currentItem: found});
      }

      render() {
        // render app UI elements
        return (
          <div>
          <h2>List of Quotes</h2>
          <ItemList items={this.state.items} handleClick={this.selectItem}/>
          <hr />
          <ItemDetail 
            item={this.state.currentItem} 
            handleClear={this.handleClear}
            handleEdit={this.handleEdit}
            handleDelete={this.handleDelete}
            handleUpdate={this.handleUpdate}
          />
          </div>
        );
      }
    }

    ReactDOM.render(<App />, document.getElementById('root'));
</script>
</body>
</html>